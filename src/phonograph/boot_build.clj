(ns phonograph.boot-build
  (:require [boot.core :as core]
            [cemerick.pomegranate.aether :as aether]
            [boot.util :as util]
            [boot.pod :as pod]
            [cljs.build.api :as cljsc]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [cheshire.core :as json]
            [boot.task.built-in :as task]
            [phonograph.sha256 :as sha256] ))

(core/deftask cljs
  "build clojurescript files"
  [m main MAIN sym "main namespace"
   f output-file PATH str "output filename"
   O optimizations KEY kw "Google Closure optimization level (none, whitespace, simple, advanced)"
   o options OPTS edn "other options for the Clojurescript compiler"]
  (let [target (core/tmp-dir!)]
    (core/with-pre-wrap [fileset]
      (let [inputs (some->> (core/input-files fileset)
                            (core/by-ext [".cljs"])
                            (map core/tmp-file))
            out-name (or output-file "main.js")
            opts (assoc (or options {})
                        :optimizations optimizations
                        :output-to (.getPath (io/file target out-name))
                        :output-dir (.getPath target))]
        (when (seq inputs)
          (util/info
           "Compiling %d Clojurescript sources (optimization \"%s\")... "
           (count inputs) (name optimizations))
          (cljsc/build (apply cljsc/inputs inputs) opts)
          (util/info "done\n")))
      (-> fileset (core/add-resource target) core/commit!))))


(def sha256-file (comp sha256/digest-stream io/input-stream))

(defn path-for-artifact [artifact]
  (str
   (str/replace (:groupId artifact) "." "/")
   "/"
   (:artifactId artifact)
   "/"
   (if (:snapshot artifact) (:baseVersion artifact) (:version artifact))
   "/"
   (:artifactId artifact)
   "-"
   (:version artifact)
   (let [c (:classifier artifact)]
     (if-not (empty? c) (str "-" c)))
   "."
   (:extension artifact)))

(defn map->coordinates [m]
  (into
   [(symbol (:groupId m) (:artifactId m))
    (:version m)]
   (mapcat identity (dissoc m :groupId :artifactId :properties
                            :file :class :version))))

(defn nix-attributes-for-artifact [m]
  {:coordinates (map->coordinates m)
   :relativePathname (path-for-artifact m)
   :sha256 (sha256-file (:file m))})

(defn ensure-trailing-slash [s]
  (if (str/ends-with? s "/") s (str s "/")))

(core/deftask nixdump
  "dump nix info"
  [f file PATH str "filename to dump to"]
  (core/with-pass-thru [_]
    (let [file-out (io/writer (if (= file "-") (System/out) file))]
      (assert file "Expected --file option.")
      (let [prod-deps (filter #(not (= (first %) 'org.clojure/test.check))
                              (:dependencies pod/env))
            all-deps (-> (aether/resolve-dependencies
                          :repositories (:repositories pod/env)
                          :coordinates prod-deps)
                         keys)
            artifacts (map (comp nix-attributes-for-artifact
                                 bean
                                 (memfn getArtifact)
                                 :dependency
                                 meta) all-deps)]
        (json/generate-stream
         {:0NOTICE "Automatically generated by 'boot nixdump', do not edit"
          :artifacts artifacts
          :repositories (map (comp ensure-trailing-slash
                                   :url
                                   second)
                             (:repositories pod/env))}
         file-out
         {:pretty true}
         )))))
